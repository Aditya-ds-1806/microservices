swagger: "2.0"
info:
  description: "This is the Content Service API documentation for the coding assignment of Backend Intern role at Pratilipi."
  version: "1.0.0"
  title: "Content Service API"
  contact:
    email: "esd18i001@iiitdm.ac.in"
host: "127.0.0.1:3000"
basePath: "/"
tags:
- name: "Content Service"
  description: "CRUD contents and sort contents by date and user interaction(likes and reads)"
schemes:
- "https"
- "http"
paths:
  /content:
    put:
      tags:
      - "Content Service"
      summary: "Bulk Insert content to DB from .csv file"
      description: ""
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "formData"
        name: "file"
        type: "file"
        description: "A CSV file that contains 4 header fields in any order: `userId`, `title`, `story`, `publishedDate`"
        required: true
      responses:
        "200":
          description: "successfully inserted content to DB"
        "400":
          description: "file not uploaded, mongoose `CastError` or `ValidationError`, bad inputs"
        "500":
          description: "everything else"
    get:
      tags:
      - "Content Service"
      summary: "List all contents in DB"
      description: ""
      parameters:
      - in: "query"
        name: "sort"
        type: "array"
        items:
          type: string
          enum:
          - "new"
          - "top"
        description: "Specify sorting order"
        required: true
      produces:
      - "application/json"
      responses:
        "200":
          description: "successfully list all contents"
        "400":
          description: "unkown sort option, mongoose `CastError` or `ValidationError`, bad inputs"
        "401":
          description: "service is unauthorized to access data to sort by `top`"
        "500":
          description: "everything else"
    post:
      tags:
      - "Content Service"
      summary: "Create new content"
      description: ""
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "user details"
        description: "Content object that needs to be added to the DB"
        required: true
        schema:
          $ref: "#/definitions/Content"
      responses:
        "200":
          description: "successfully create content"
        "400":
          description: "mongoose `CastError` or `ValidationError`, bad inputs"
        "404":
          description: "user not found"
        "500":
          description: "everything else"
  /content/{contentId}:
    get:
      tags:
      - "Content Service"
      summary: "Read content by contentId"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "contentId"
        in: "path"
        description: "ID of the content to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successfully read content"
        "400":
          description: "invalid `contentId`, mongoose `CastError` or `ValidationError`, bad inputs"
        "404":
          description: "content not found"
        "500":
          description: "everything else"
    put:
      tags:
      - "Content Service"
      summary: "Update content by contentId"
      description: ""
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "contentId"
        in: "path"
        description: "ID of content that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "update object"
        schema:
          $ref: "#/definitions/Content"
        in: "body"
        description: "Properties of the content to be updated, a subschema of the below schema also works"
        required: false
      responses:
        "200":
          description: "successfully updated content"
        "400":
          description: "invalid `contentId`, mongoose `CastError` or `ValidationError`, bad inputs"
        "404":
          description: "content not found"
        "500":
          description: "everything else"
    delete:
      tags:
      - "Content Service"
      summary: "Delete content by contentId"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "contentId"
        in: "path"
        description: "Content Id to delete"
        required: true
        type: "string"
      responses:
        "200":
          description: "successfully deleted content"
        "400":
          description: "invalid `contentId`, mongoose `CastError` or `ValidationError`, bad inputs"
        "404":
          description: "contentId not found"
        "500":
          description: "everything else"
definitions:
  Content:
    type: "object"
    required:
    - "userId"
    - "title"
    - "story"
    properties:
      userId:
        type: "string"
      publishedDate:
        type: "string"
        format: "Date"
      title:
        type: "string"
      story:
        type: "string"
    xml:
      name: "Content"
  API Response:
    type: "object"
    properties:
      status:
        type: "integer"
      data:
        type: "object"
      message:
        type: "string"
